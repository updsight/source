import os
import hashlib
import psutil
import time

# ---------- Part 1: Check if an EXE with the given MD5 is running ----------
def get_file_md5(path):
    try:
        with open(path, 'rb') as f:
            md5 = hashlib.md5()
            while chunk := f.read(4096):
                md5.update(chunk)
            return md5.hexdigest()
    except Exception as e:
        print(f"[!] Failed to compute MD5 for {path}: {e}")
        return None

def find_running_exe_by_md5(target_md5):
    print(f"[+] Scanning for running executables matching MD5: {target_md5}")
    for proc in psutil.process_iter(['pid', 'exe']):
        try:
            exe_path = proc.info['exe']
            if exe_path and os.path.exists(exe_path):
                exe_md5 = get_file_md5(exe_path)
                if exe_md5 == target_md5:
                    print(f"[âœ”] Found matching running EXE: {exe_path} (PID: {proc.pid})")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

# ---------- Part 2: Monitor for two or more cve.txt files ----------
def count_cve_txt_files(root_dir="."):
    count = 0
    paths = []
    for dirpath, _, files in os.walk(root_dir):
        for f in files:
            if f.lower() == "cve.txt":
                count += 1
                paths.append(os.path.abspath(os.path.join(dirpath, f)))
    return count, paths

def monitor_cve_txt(interval=5, root_dir="."):
    print(f"[+] Monitoring for multiple 'cve.txt' files under {os.path.abspath(root_dir)}...")
    while True:
        count, paths = count_cve_txt_files(root_dir)
        if count >= 2:
            print(f"[!] Detected {count} 'cve.txt' files:")
            for p in paths:
                print(f"    - {p}")
            break
        time.sleep(interval)

# ---------- Main ----------
if __name__ == "__main__":
    target_md5 = input("Enter the MD5 hash of the EXE to check for: ").strip().lower()

    # Step 1: Check for running EXEs with matching MD5
    find_running_exe_by_md5(target_md5)

    # Step 2: Monitor for cve.txt duplicates
    monitor_cve_txt(root_dir=".")
